<?php

namespace AiPlusBlockEditor\Tests\Abstracts;

use Mockery;
use WP_Mock\Tools\TestCase;
use AiPlusBlockEditor\Core\AI;
use AiPlusBlockEditor\Providers\OpenAI;

/**
 * @covers \AiPlusBlockEditor\Core\AI::run
 */
class AITest extends TestCase {
	public AI $ai;

	public function setUp(): void {
		\WP_Mock::setUp();
	}

	public function tearDown(): void {
		\WP_Mock::tearDown();
	}

	public function test_run() {
		$ai = Mockery::mock( AI::class )->makePartial();
		$ai->shouldAllowMockingProtectedMethods();

		$open_ai = Mockery::mock( OpenAI::class )->makePartial();
		$open_ai->shouldAllowMockingProtectedMethods();

		$ai->shouldReceive( 'get_provider' )
			->andReturn( $open_ai );

		$open_ai->shouldReceive( 'run' )
			->times( 1 )
			->with(
				[
					'content' => 'Generate an SEO friendly headline using: Hello World!',
				]
			)
			->andReturn(
				'What a Wonderful World! Generated by Open AI...'
			);

		$response = $ai->run(
			[
				'content' => 'Generate an SEO friendly headline using: Hello World!',
			]
		);

		$this->assertSame( $response, 'What a Wonderful World! Generated by Open AI...' );
		$this->assertConditionsMet();
	}
}
